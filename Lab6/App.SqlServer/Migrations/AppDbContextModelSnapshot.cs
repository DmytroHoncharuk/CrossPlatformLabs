// <auto-generated />
using System;
using App.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace App.SqlServer.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("App.Models.Appointment", b =>
                {
                    b.Property<int>("AppointmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AppointmentId"));

                    b.Property<DateTime>("AppointmentDate")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("AppointmentTime")
                        .HasColumnType("time");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("ColourUsed")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HairStyleCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProductCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductCode1")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("StaffId")
                        .HasColumnType("int");

                    b.HasKey("AppointmentId");

                    b.HasIndex("ClientId");

                    b.HasIndex("HairStyleCode");

                    b.HasIndex("ProductCode1");

                    b.HasIndex("StaffId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("App.Models.ClientEntity", b =>
                {
                    b.Property<int>("ClientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClientId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AgeBandCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CellPhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GenderCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("HomePhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NaturalHairColor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OtherDetails")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ClientId");

                    b.HasIndex("AgeBandCode");

                    b.HasIndex("GenderCode");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("App.Models.Document", b =>
                {
                    b.Property<int>("DocumentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DocumentId"));

                    b.Property<string>("DocumentDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DocumentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OtherDetails")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DocumentId");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("App.Models.DocumentUser", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<int>("DocumentId")
                        .HasColumnType("int");

                    b.Property<string>("UserType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.HasIndex("DocumentId");

                    b.ToTable("DocumentUsers");
                });

            modelBuilder.Entity("App.Models.PaymentDetail", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentId"));

                    b.Property<decimal>("AmountDue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("AmountPaid")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfPayment")
                        .HasColumnType("datetime2");

                    b.HasKey("PaymentId");

                    b.HasIndex("ClientId");

                    b.ToTable("PaymentDetails");
                });

            modelBuilder.Entity("App.Models.Product", b =>
                {
                    b.Property<string>("ProductCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("OtherDetails")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductCode");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("App.Models.RefAgeBand", b =>
                {
                    b.Property<string>("AgeBandCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AgeBandDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AgeBandCode");

                    b.ToTable("AgeBands");
                });

            modelBuilder.Entity("App.Models.RefGender", b =>
                {
                    b.Property<string>("GenderCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("GenderDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GenderCode");

                    b.ToTable("Genders");
                });

            modelBuilder.Entity("App.Models.RefHairStyle", b =>
                {
                    b.Property<string>("HairStyleCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("HairStyleDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("HairStyleCode");

                    b.ToTable("HairStyles");
                });

            modelBuilder.Entity("App.Models.RefSalonTreatment", b =>
                {
                    b.Property<string>("SalonTreatmentCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("StandardPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("TreatmentDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SalonTreatmentCode");

                    b.ToTable("SalonTreatments");
                });

            modelBuilder.Entity("App.Models.RefStaffJobTitle", b =>
                {
                    b.Property<string>("JobCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("JobDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("JobCode");

                    b.ToTable("StaffJobTitles");
                });

            modelBuilder.Entity("App.Models.Staff", b =>
                {
                    b.Property<int>("StaffId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StaffId"));

                    b.Property<DateTime>("DateJoined")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateLeft")
                        .HasColumnType("datetime2");

                    b.Property<string>("JobCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JobTitleJobCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("StaffDetails")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StaffName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StaffId");

                    b.HasIndex("JobTitleJobCode");

                    b.ToTable("Staff");
                });

            modelBuilder.Entity("App.Models.StaffCharge", b =>
                {
                    b.Property<string>("JobCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("ChargeAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("JobTitleJobCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SalonTreatmentCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SalonTreatmentCode1")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("JobCode");

                    b.HasIndex("JobTitleJobCode");

                    b.HasIndex("SalonTreatmentCode1");

                    b.ToTable("StaffCharges");
                });

            modelBuilder.Entity("App.Models.Appointment", b =>
                {
                    b.HasOne("App.Models.ClientEntity", "Client")
                        .WithMany("Appointments")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.Models.RefHairStyle", "HairStyle")
                        .WithMany("Appointments")
                        .HasForeignKey("HairStyleCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.Models.Product", "Product")
                        .WithMany("Appointments")
                        .HasForeignKey("ProductCode1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.Models.Staff", "Staff")
                        .WithMany("Appointments")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("HairStyle");

                    b.Navigation("Product");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("App.Models.ClientEntity", b =>
                {
                    b.HasOne("App.Models.RefAgeBand", "AgeBand")
                        .WithMany("Clients")
                        .HasForeignKey("AgeBandCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.Models.RefGender", "Gender")
                        .WithMany("Clients")
                        .HasForeignKey("GenderCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AgeBand");

                    b.Navigation("Gender");
                });

            modelBuilder.Entity("App.Models.DocumentUser", b =>
                {
                    b.HasOne("App.Models.Document", "Document")
                        .WithMany("DocumentUsers")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Document");
                });

            modelBuilder.Entity("App.Models.PaymentDetail", b =>
                {
                    b.HasOne("App.Models.ClientEntity", "Client")
                        .WithMany("PaymentDetails")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("App.Models.Staff", b =>
                {
                    b.HasOne("App.Models.RefStaffJobTitle", "JobTitle")
                        .WithMany("Staff")
                        .HasForeignKey("JobTitleJobCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("JobTitle");
                });

            modelBuilder.Entity("App.Models.StaffCharge", b =>
                {
                    b.HasOne("App.Models.RefStaffJobTitle", "JobTitle")
                        .WithMany()
                        .HasForeignKey("JobTitleJobCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.Models.RefSalonTreatment", "SalonTreatment")
                        .WithMany("StaffCharges")
                        .HasForeignKey("SalonTreatmentCode1");

                    b.Navigation("JobTitle");

                    b.Navigation("SalonTreatment");
                });

            modelBuilder.Entity("App.Models.ClientEntity", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("PaymentDetails");
                });

            modelBuilder.Entity("App.Models.Document", b =>
                {
                    b.Navigation("DocumentUsers");
                });

            modelBuilder.Entity("App.Models.Product", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("App.Models.RefAgeBand", b =>
                {
                    b.Navigation("Clients");
                });

            modelBuilder.Entity("App.Models.RefGender", b =>
                {
                    b.Navigation("Clients");
                });

            modelBuilder.Entity("App.Models.RefHairStyle", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("App.Models.RefSalonTreatment", b =>
                {
                    b.Navigation("StaffCharges");
                });

            modelBuilder.Entity("App.Models.RefStaffJobTitle", b =>
                {
                    b.Navigation("Staff");
                });

            modelBuilder.Entity("App.Models.Staff", b =>
                {
                    b.Navigation("Appointments");
                });
#pragma warning restore 612, 618
        }
    }
}
